{"ast":null,"code":"import axios from 'axios';\nimport { USER_LOGIN_REQUEST, USER_LOGIN_SUCCESS, USER_LOGIN_FAILURE, USER_LOGOUT, USER_SEND_REQUEST, USER_SEND_SUCCESS, USER_SEND_FAILURE, ADMIN_SEND_REQUEST, ADMIN_SEND_SUCCESS, ADMIN_SEND_FAILURE, USER_VERIFY_REQUEST, USER_VERIFY_SUCCESS, USER_VERIFY_FAILURE, USER_REGISTER_REQUEST, USER_REGISTER_SUCCESS, USER_REGISTER_FAILURE, USER_DETAILS_REQUEST, USER_DETAILS_SUCCESS, USER_DETAILS_FAILURE, USER_DETAILS_RESET //USER_UPDATE_PROFILE_RESET,\n, USER_UPDATE_PROFILE_REQUEST, USER_UPDATE_PROFILE_SUCCESS, USER_UPDATE_PROFILE_FAILURE, USER_LIST_REQUEST, USER_LIST_SUCCESS, USER_LIST_FAILURE, USER_LIST_RESET, USER_DELETE_REQUEST, USER_DELETE_SUCCESS, USER_DELETE_FAILURE, USER_UPDATE_REQUEST, USER_UPDATE_SUCCESS, USER_UPDATE_FAILURE } from '../constants/UserConstants.js';\nimport { ORDER_LIST_MY_RESET } from '../constants/orderConstants.js';\nexport const login = (email, password) => async dispatch => {\n  //redux thunk was used just now in the form of async (dispatch) above\n  try {\n    dispatch({\n      type: USER_LOGIN_REQUEST\n    }); //we do config cus we wanna send the headers a content type of application/json\n\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const {\n      data\n    } = await axios.post('/api/users/login/', {\n      email,\n      password\n    }, config);\n    /*does axios return more than one variable, this one that we're destructuring, and takin data?*/\n\n    dispatch({\n      type: USER_LOGIN_SUCCESS,\n      payload: data\n    });\n    localStorage.setItem('userInfo', JSON.stringify(data));\n  } catch (error) {\n    dispatch({\n      type: USER_LOGIN_FAILURE,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const clientSaid = (clientMessage, clientId, clientName) => async dispatch => {\n  try {\n    dispatch({\n      type: USER_SEND_REQUEST\n    });\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const {\n      data\n    } = await axios.patch('api/users/clientMessage', {\n      clientMessage,\n      clientId,\n      clientName\n    }, config);\n    dispatch({\n      type: USER_SEND_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: USER_SEND_FAILURE,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const adminSaid = (bossMessage, clientId, clientEmail, clientName) => async dispatch => {\n  try {\n    dispatch({\n      type: ADMIN_SEND_REQUEST\n    });\n    /* WHY DO WE EVEN HAVE this reducer, when we dont call it from store */\n\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const {\n      data\n    } = await axios.patch('/admin/user/:id/api/users/adminMessage', {\n      bossMessage,\n      clientId,\n      clientEmail,\n      clientName\n    }, config);\n    dispatch({\n      type: ADMIN_SEND_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: ADMIN_SEND_FAILURE,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const answerVerify = (clientId, personalIdQuery, personalIdAnswer) => async dispatch => {\n  try {\n    dispatch({\n      type: USER_VERIFY_REQUEST\n    });\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const {\n      data\n    } = await axios.post('api/users/verify', {\n      clientId,\n      personalIdQuery,\n      personalIdAnswer\n    }, config);\n    /*can you send stuff in the second argument of your get request? - no, thats not the agreed upon convention */\n\n    dispatch({\n      type: USER_VERIFY_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: USER_VERIFY_FAILURE,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const logout = () => dispatch => {\n  localStorage.removeItem('userInfo');\n  dispatch({\n    type: USER_LOGOUT\n  });\n  dispatch({\n    type: USER_DETAILS_RESET\n  }); //HE IS DOING THIS IN THE LOGOUT FILE BECAUSE, HE WANTS TO CLEAR OUT USER DETAILS AND ORDER LIST OF ANY PREVIOUSLY LOGGED IN USER, ALL IN ONE FELL SWOOP\n\n  dispatch({\n    type: ORDER_LIST_MY_RESET\n  });\n  dispatch({\n    type: USER_LIST_RESET\n  });\n};\nexport const register = (name, email, password, momFirstName, shoeSize, closestFriend, childhoodStreet, firstEmployment, pickupAddress, isMerchant) => async dispatch => {\n  //redux thunk was used just now in the form of async (dispatch) above\n  try {\n    dispatch({\n      type: USER_REGISTER_REQUEST\n    }); //we do config cus we wanna send the headers a content type of application/json\n\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const {\n      data\n    } = await axios.post('/api/users', {\n      name,\n      email,\n      password,\n      momFirstName,\n      shoeSize,\n      closestFriend,\n      childhoodStreet,\n      firstEmployment,\n      pickupAddress,\n      isMerchant\n    }, config); //i'm gonna take a stab here and say that the third argument for axios is for setting header property\n\n    dispatch({\n      type: USER_REGISTER_SUCCESS,\n      payload: data\n    }); //cuz we also want to log the user in upon registration we dispatch user-login-success as well\n\n    dispatch({\n      type: USER_LOGIN_SUCCESS,\n      payload: data\n    });\n    localStorage.setItem('userInfo', JSON.stringify(data));\n  } catch (error) {\n    dispatch({\n      type: USER_REGISTER_FAILURE,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const getUserDetails = id => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: USER_DETAILS_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState(); //we do config cus we wanna send he headers a content type of application/json\n\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    const {\n      data\n    } = await axios.get(`/api/users/${id}`, config);\n    dispatch({\n      type: USER_DETAILS_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: USER_DETAILS_FAILURE,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const updateUserProfile = (user\n/*the entire user object*/\n) => async (dispatch, getState) => {\n  //redux thunk was used just now in the form of async (dispatch) above\n  try {\n    dispatch({\n      type: USER_UPDATE_PROFILE_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState(); //we do config cus we wanna send the headers a content type of application/json\n\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    const {\n      data\n    } = await axios.put(`/api/users/profile`, user, config); //i'm gonna take a stab here and say that the third argument for axios is for setting header property\n\n    dispatch({\n      type: USER_UPDATE_PROFILE_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: USER_UPDATE_PROFILE_FAILURE,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const listUsers = () => async (dispatch, getState) => {\n  //redux thunk was used just now in the form of async (dispatch) above\n  try {\n    dispatch({\n      type: USER_LIST_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState(); //we do config cus we wanna send he headers a content type of application/json\n\n    const config = {\n      headers: {\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    const {\n      data\n    } = await axios.get(`/api/users`, config); //i'm gonna take a stab here and say that the third argument for axios is for setting header property\n\n    dispatch({\n      type: USER_LIST_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: USER_LIST_FAILURE,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const deleteUser = id => async (dispatch, getState) => {\n  //redux thunk was used just now in the form of async (dispatch) above\n  try {\n    dispatch({\n      type: USER_DELETE_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState(); //we do config cus we wanna send he headers a content type of application/json\n\n    const config = {\n      headers: {\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    await axios.delete(`/api/users/${id}`, config); //i'm gonna take a stab here and say that the third argument for axios is for setting header property\n\n    dispatch({\n      type: USER_DELETE_SUCCESS\n    });\n  } catch (error) {\n    dispatch({\n      type: USER_DELETE_FAILURE,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const updateUser = user => async (dispatch, getState) => {\n  //redux thunk was used just now in the form of async (dispatch) above\n  try {\n    dispatch({\n      type: USER_UPDATE_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState(); //we do config cus we wanna send he headers a content type of application/json\n\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    const {\n      data\n    } = await axios.put(`/api/users/${user._id}`, user, config); //i'm gonna take a stab here and say that the third argument for axios is for setting header property\n\n    dispatch({\n      type: USER_UPDATE_SUCCESS\n    });\n    dispatch({\n      type: USER_DETAILS_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: USER_UPDATE_FAILURE,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};","map":{"version":3,"sources":["/home/dagogo/Desktop/bridgeway-kids/frontend/src/actions/userActions.js"],"names":["axios","USER_LOGIN_REQUEST","USER_LOGIN_SUCCESS","USER_LOGIN_FAILURE","USER_LOGOUT","USER_SEND_REQUEST","USER_SEND_SUCCESS","USER_SEND_FAILURE","ADMIN_SEND_REQUEST","ADMIN_SEND_SUCCESS","ADMIN_SEND_FAILURE","USER_VERIFY_REQUEST","USER_VERIFY_SUCCESS","USER_VERIFY_FAILURE","USER_REGISTER_REQUEST","USER_REGISTER_SUCCESS","USER_REGISTER_FAILURE","USER_DETAILS_REQUEST","USER_DETAILS_SUCCESS","USER_DETAILS_FAILURE","USER_DETAILS_RESET","USER_UPDATE_PROFILE_REQUEST","USER_UPDATE_PROFILE_SUCCESS","USER_UPDATE_PROFILE_FAILURE","USER_LIST_REQUEST","USER_LIST_SUCCESS","USER_LIST_FAILURE","USER_LIST_RESET","USER_DELETE_REQUEST","USER_DELETE_SUCCESS","USER_DELETE_FAILURE","USER_UPDATE_REQUEST","USER_UPDATE_SUCCESS","USER_UPDATE_FAILURE","ORDER_LIST_MY_RESET","login","email","password","dispatch","type","config","headers","data","post","payload","localStorage","setItem","JSON","stringify","error","response","message","clientSaid","clientMessage","clientId","clientName","patch","adminSaid","bossMessage","clientEmail","answerVerify","personalIdQuery","personalIdAnswer","logout","removeItem","register","name","momFirstName","shoeSize","closestFriend","childhoodStreet","firstEmployment","pickupAddress","isMerchant","getUserDetails","id","getState","userLogin","userInfo","Authorization","token","get","updateUserProfile","user","put","listUsers","deleteUser","delete","updateUser","_id"],"mappings":"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","sourcesContent":[" import axios from 'axios'\n import {\n         USER_LOGIN_REQUEST,\n         USER_LOGIN_SUCCESS,\n         USER_LOGIN_FAILURE,\n         USER_LOGOUT,\n         USER_SEND_REQUEST,\n         USER_SEND_SUCCESS,\n         USER_SEND_FAILURE,\n         ADMIN_SEND_REQUEST,\n         ADMIN_SEND_SUCCESS,\n         ADMIN_SEND_FAILURE,\n         USER_VERIFY_REQUEST,\n         USER_VERIFY_SUCCESS,\n         USER_VERIFY_FAILURE,\n         USER_REGISTER_REQUEST,\n         USER_REGISTER_SUCCESS,\n         USER_REGISTER_FAILURE,\n         USER_DETAILS_REQUEST,\n         USER_DETAILS_SUCCESS,\n         USER_DETAILS_FAILURE,\n         USER_DETAILS_RESET,\n         //USER_UPDATE_PROFILE_RESET,\n         USER_UPDATE_PROFILE_REQUEST,\n         USER_UPDATE_PROFILE_SUCCESS,\n         USER_UPDATE_PROFILE_FAILURE,\n         USER_LIST_REQUEST,\n         USER_LIST_SUCCESS,\n         USER_LIST_FAILURE,\n         USER_LIST_RESET,\n         USER_DELETE_REQUEST,\n         USER_DELETE_SUCCESS,\n         USER_DELETE_FAILURE,\n         USER_UPDATE_REQUEST,\n         USER_UPDATE_SUCCESS,\n         USER_UPDATE_FAILURE\n       } from '../constants/UserConstants.js'\n\nimport { ORDER_LIST_MY_RESET } from '../constants/orderConstants.js'\n\nexport const login = (email,password) => async(dispatch) =>{\n   //redux thunk was used just now in the form of async (dispatch) above\n  try {\n    dispatch({type: USER_LOGIN_REQUEST})\n\n    //we do config cus we wanna send the headers a content type of application/json\n    const config = {\n      headers:{ \n        'Content-Type':'application/json'\n      }\n    }\n    const {data} = await axios.post('/api/users/login/',{email,password},config)\n    /*does axios return more than one variable, this one that we're destructuring, and takin data?*/\n\n    dispatch({\n              type: USER_LOGIN_SUCCESS,\n              payload:data})\n\n    localStorage.setItem('userInfo',JSON.stringify(data))\n\n  }\n   catch(error){\n     dispatch({type:USER_LOGIN_FAILURE,\n               payload: error.response && error.response.data.message?\n                error.response.data.message:error.message })\n   }\n}\n\nexport const clientSaid = (clientMessage, clientId,clientName) => async(dispatch) => {\n    try{\n      dispatch({type: USER_SEND_REQUEST})\n      \n      const config = {\n        headers:{\n          'Content-Type':'application/json'\n        }\n      }\n\n      const {data} = await axios.patch('api/users/clientMessage',{clientMessage,clientId,clientName},config)\n      \n      dispatch({type:USER_SEND_SUCCESS,\n      payload:data})\n\n    }\n   catch(error){\n      dispatch({type:USER_SEND_FAILURE,\n       payload:error.response && error.response.data.message?\n      error.response.data.message:error.message})\n   }\n}\n\nexport const adminSaid = (bossMessage, clientId,clientEmail,clientName) => async(dispatch) => {\n  try{\n    dispatch({type: ADMIN_SEND_REQUEST}) /* WHY DO WE EVEN HAVE this reducer, when we dont call it from store */\n    \n    const config = {\n      headers:{\n        'Content-Type':'application/json'\n      }\n    }\n    \n    const {data} = await axios.patch('/admin/user/:id/api/users/adminMessage',{bossMessage, clientId,clientEmail,clientName},config)\n    \n    dispatch({type:ADMIN_SEND_SUCCESS,\n    payload:data})\n\n  }\n catch(error){\n    dispatch({type:ADMIN_SEND_FAILURE,\n     payload:error.response && error.response.data.message?\n    error.response.data.message:error.message})\n }\n}\n\nexport const answerVerify = (clientId, personalIdQuery,personalIdAnswer) => async(dispatch) => {\n  try{\n    dispatch({type: USER_VERIFY_REQUEST})\n    \n    const config = {\n      headers:{\n        'Content-Type':'application/json'\n      }\n    }\n\n    const {data} = await axios.post('api/users/verify',{clientId,personalIdQuery,personalIdAnswer},config)\n      \n    /*can you send stuff in the second argument of your get request? - no, thats not the agreed upon convention */\n    dispatch({type:USER_VERIFY_SUCCESS,\n    payload:data})\n\n  }\n catch(error){\n    dispatch({type:USER_VERIFY_FAILURE,\n     payload:error.response && error.response.data.message?\n    error.response.data.message:error.message})\n }\n}\n\n\n\n\n\n\n\nexport const logout = () => (dispatch) => {\n    localStorage.removeItem('userInfo')\n    dispatch({type:USER_LOGOUT})\n    dispatch({type:USER_DETAILS_RESET})    //HE IS DOING THIS IN THE LOGOUT FILE BECAUSE, HE WANTS TO CLEAR OUT USER DETAILS AND ORDER LIST OF ANY PREVIOUSLY LOGGED IN USER, ALL IN ONE FELL SWOOP\n    dispatch({type:ORDER_LIST_MY_RESET})\n      dispatch({type:USER_LIST_RESET})\n}\n \n\nexport const register = (name,email,password,momFirstName,shoeSize,closestFriend,childhoodStreet, firstEmployment,pickupAddress,isMerchant) => async(dispatch)=> {\n   //redux thunk was used just now in the form of async (dispatch) above\n  try {\n    dispatch({type: USER_REGISTER_REQUEST})\n\n    //we do config cus we wanna send the headers a content type of application/json\n    const config = {\n      headers:{\n        'Content-Type':'application/json'\n      }\n    }\n    const {data} = await axios.post('/api/users',{name,email,password,momFirstName,shoeSize,closestFriend,childhoodStreet, firstEmployment,pickupAddress,isMerchant},config)\n    //i'm gonna take a stab here and say that the third argument for axios is for setting header property\n\n    dispatch({\n              type: USER_REGISTER_SUCCESS,\n              payload:data})\n\n//cuz we also want to log the user in upon registration we dispatch user-login-success as well\n    dispatch({\n              type: USER_LOGIN_SUCCESS,\n              payload:data})\n\n    localStorage.setItem('userInfo',JSON.stringify(data))\n\n  }\n   catch(error){\n     dispatch({type:USER_REGISTER_FAILURE,\n               payload: error.response && error.response.data.message?\n                error.response.data.message:error.message })\n   }\n}\n\nexport const getUserDetails = (id) => async (dispatch,getState) => {\n   \n  try {\n    dispatch({type: USER_DETAILS_REQUEST})\n\n  const {userLogin:{userInfo}} = getState()\n    //we do config cus we wanna send he headers a content type of application/json\n    const config = {\n      headers:{\n        'Content-Type':'application/json',\n        Authorization:`Bearer ${userInfo.token}`\n      }\n    }\n    const {data} = await axios.get(`/api/users/${id}`,config)\n    \n\n    dispatch({\n              type: USER_DETAILS_SUCCESS,\n              payload:data})\n\n  }\n   catch(error){\n     dispatch({type:USER_DETAILS_FAILURE,\n               payload: error.response && error.response.data.message?\n                error.response.data.message:error.message })\n   }\n}\nexport const updateUserProfile  = (user /*the entire user object*/) => async(dispatch,getState) => {\n   //redux thunk was used just now in the form of async (dispatch) above\n  try {\n    dispatch({type: USER_UPDATE_PROFILE_REQUEST})\n\n     const {userLogin:{userInfo}} = getState()\n    //we do config cus we wanna send the headers a content type of application/json\n    const config = {\n      headers:{\n        'Content-Type':'application/json',\n        Authorization:`Bearer ${userInfo.token}`\n      }\n    }\n    const {data} = await axios.put(`/api/users/profile`,user,config)\n    //i'm gonna take a stab here and say that the third argument for axios is for setting header property\n\n    dispatch({\n              type: USER_UPDATE_PROFILE_SUCCESS,\n              payload:data})\n\n  }\n   catch(error){\n     dispatch({type:USER_UPDATE_PROFILE_FAILURE,\n               payload: error.response && error.response.data.message?\n                error.response.data.message:error.message })\n   }\n}\n\n\n\nexport const listUsers  = () => async (dispatch,getState)=> {\n   //redux thunk was used just now in the form of async (dispatch) above\n  try {\n    dispatch({type: USER_LIST_REQUEST})\n\n     const {userLogin:{userInfo}} = getState()\n    //we do config cus we wanna send he headers a content type of application/json\n    const config = {\n      headers:{\n\n        Authorization:`Bearer ${userInfo.token}`\n      }\n    }\n    const {data} = await axios.get(`/api/users`,config)\n    //i'm gonna take a stab here and say that the third argument for axios is for setting header property\n\n    dispatch({\n              type: USER_LIST_SUCCESS,\n              payload:data})\n\n  }\n   catch(error){\n     dispatch({type:USER_LIST_FAILURE,\n               payload: error.response && error.response.data.message?\n                error.response.data.message:error.message })\n   }\n}\n\n\nexport const deleteUser  = (id) => async (dispatch,getState)=> {\n   //redux thunk was used just now in the form of async (dispatch) above\n  try {\n    dispatch({type: USER_DELETE_REQUEST})\n\n     const {userLogin:{userInfo}} = getState()\n    //we do config cus we wanna send he headers a content type of application/json\n    const config = {\n      headers:{\n\n        Authorization:`Bearer ${userInfo.token}`\n      }\n    }\n    await axios.delete(`/api/users/${id}`,config)\n    //i'm gonna take a stab here and say that the third argument for axios is for setting header property\n\n    dispatch({\n              type: USER_DELETE_SUCCESS})\n\n  }\n   catch(error){\n     dispatch({type:USER_DELETE_FAILURE,\n               payload: error.response && error.response.data.message?\n                error.response.data.message:error.message })\n   }\n}\n\n\nexport const updateUser  = (user) => async (dispatch,getState)=> {\n   //redux thunk was used just now in the form of async (dispatch) above\n  try {\n    dispatch({type: USER_UPDATE_REQUEST})\n\n     const {userLogin:{userInfo}} = getState()\n    //we do config cus we wanna send he headers a content type of application/json\n    const config = {\n      headers:{\n     'Content-Type':'application/json',\n        Authorization:`Bearer ${userInfo.token}`\n      }\n    }\n    const{data} = await axios.put(`/api/users/${user._id}`, user,config)\n    //i'm gonna take a stab here and say that the third argument for axios is for setting header property\n\n    dispatch({  type: USER_UPDATE_SUCCESS})\n\n    dispatch({  type: USER_DETAILS_SUCCESS , payload:data})\n\n  }\n   catch(error){\n     dispatch({type:USER_UPDATE_FAILURE,\n               payload: error.response && error.response.data.message?\n                error.response.data.message:error.message })\n   }\n}\n"]},"metadata":{},"sourceType":"module"}