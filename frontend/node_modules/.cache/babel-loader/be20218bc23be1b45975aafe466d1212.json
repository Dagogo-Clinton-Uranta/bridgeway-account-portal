{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/dagogo/Desktop/bridgeway-kids/frontend/src/screens/ViewBalanceScreen.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Row, Col, Image, ListGroup, Card, Button, Form } from 'react-bootstrap';\n/*import Rating from '../components/Rating'*/\n\nimport Message from '../components/Message';\nimport Loader from '../components/Loader';\nimport Meta from '../components/Meta';\nimport { useDispatch, useSelector } from 'react-redux';\nimport showAccountDetails from '../actions/accountActions.js';\n/*import {PRODUCT_CREATE_REVIEW_RESET} from '../constants/productConstants.js'*/\n\nconst ViewBalanceScreen = ({\n  history,\n  match\n}) => {\n  _s();\n\n  /*const redirect = location.search?location.search.split('=')[1]:'/'  */\n  const accountId = match.params.id;\n  /*const [qty ,setQty] = useState(1)\n   const [rating ,setRating] = useState(0)\n   const [comment ,setComment] = useState('')*/\n\n  const dispatch = useDispatch();\n  /*const productDetails = useSelector(state => state.productDetails)\n  const {product,loading, error} = productDetails*/\n\n  const accountDetails = useSelector(state => state.accountDetails);\n  const {\n    account,\n    loading,\n    error\n  } = accountDetails;\n  console.log(accountDetails);\n  useEffect(() => {\n    if (!accountId) {\n      //I want to redirect them back to the home screen if they haven't entered any account number, but they will be on this screen if they entered a bad account number, just to see, invalid number\n      history.push('/');\n    } else {\n      dispatch(showAccountDetails(accountId));\n    }\n  }, [dispatch, accountId]);\n  /*const addToCartHandler = () => {\n    if(!userInfo){\n      window.alert('Please sign in to purchase')\n    }\n    else if(userInfo && (userInfo.isAdmin||userInfo.isMerchant)){\n      window.alert('Only customers may make purchases, please register as a customer')\n    }\n      else{history.push(`/cart/${match.params.id}?qty=${qty}`)} //there was a blank set of curly braces here, you just put quantity in \n  } */\n\n  /*const previousPageHandler = () => {\n    \n    window.history.back()\n  }*/\n\n  /*console.log(productDetails)*/\n\n  /*const submitHandler =(e) =>{\n    e.preventDefault() //since submit handler is being called inside a form\n    dispatch(createProductReview(match.params.id,{\n      rating,\n      comment //both rating and comment are coming from local/comment state\n    }))\n  }*/\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: loading ? /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 20\n    }, this) : error ? /*#__PURE__*/_jsxDEV(Message, {\n      variant: \"danger\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 37\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Meta, {\n        title: account.Name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Row, {\n        children: [/*#__PURE__*/_jsxDEV(Col, {\n          md: 6,\n          children: [/*#__PURE__*/_jsxDEV(Link, {\n            to: \"/\",\n            children: \"Go Back\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 12\n          }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Current Balance:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 10\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 10\n          }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 10\n          }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Withdrawable Balance:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 10\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 10\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 12\n        }, this), /*#__PURE__*/_jsxDEV(Col, {\n          md: 3,\n          children: /*#__PURE__*/_jsxDEV(ListGroup, {\n            variant: \"flush\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 12\n        }, this), /*#__PURE__*/_jsxDEV(Col, {\n          md: 3,\n          children: /*#__PURE__*/_jsxDEV(Card, {\n            children: /*#__PURE__*/_jsxDEV(ListGroup, {\n              variant: \"flush\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 100,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 14\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Row, {\n        children: /*#__PURE__*/_jsxDEV(Col, {\n          md: 6,\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Reviews\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(ListGroup, {\n            variant: \"flush\",\n            children: /*#__PURE__*/_jsxDEV(ListGroup.Item, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 115,\n              columnNumber: 16\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)\n  }, void 0, false);\n};\n\n_s(ViewBalanceScreen, \"wWFo3U1oJsSa6PiZCEMxiM6+Da0=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = ViewBalanceScreen;\nexport default ViewBalanceScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"ViewBalanceScreen\");","map":{"version":3,"sources":["/home/dagogo/Desktop/bridgeway-kids/frontend/src/screens/ViewBalanceScreen.js"],"names":["React","useState","useEffect","Link","Row","Col","Image","ListGroup","Card","Button","Form","Message","Loader","Meta","useDispatch","useSelector","showAccountDetails","ViewBalanceScreen","history","match","accountId","params","id","dispatch","accountDetails","state","account","loading","error","console","log","push","Name"],"mappings":"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","sourcesContent":["import React ,{useState, useEffect} from 'react'\nimport {Link} from 'react-router-dom'\nimport {Row, Col, Image, ListGroup, Card, Button,Form} from 'react-bootstrap'\n/*import Rating from '../components/Rating'*/\nimport Message from '../components/Message'\nimport Loader from '../components/Loader'\nimport Meta from '../components/Meta'\nimport {useDispatch, useSelector} from 'react-redux'\nimport showAccountDetails from '../actions/accountActions.js'\n/*import {PRODUCT_CREATE_REVIEW_RESET} from '../constants/productConstants.js'*/\n\n\nconst ViewBalanceScreen = ({history,match}) => {\n  /*const redirect = location.search?location.search.split('=')[1]:'/'  */\n  const accountId = match.params.id\n   \n  /*const [qty ,setQty] = useState(1)\n   const [rating ,setRating] = useState(0)\n   const [comment ,setComment] = useState('')*/\n\n  const dispatch = useDispatch()\n  \n  /*const productDetails = useSelector(state => state.productDetails)\n  const {product,loading, error} = productDetails*/\n\n  const accountDetails = useSelector(state => state.accountDetails)\n  const {account,loading,error} = accountDetails\n  console.log(accountDetails)\n  \nuseEffect(() => {\n  if(!accountId){   //I want to redirect them back to the home screen if they haven't entered any account number, but they will be on this screen if they entered a bad account number, just to see, invalid number\n    history.push('/')\n }else{\n  dispatch(showAccountDetails(accountId))\n\n }\n},[dispatch,accountId])\n\n\n\n\n/*const addToCartHandler = () => {\n  if(!userInfo){\n    window.alert('Please sign in to purchase')\n  }\n  else if(userInfo && (userInfo.isAdmin||userInfo.isMerchant)){\n    window.alert('Only customers may make purchases, please register as a customer')\n  }\n    else{history.push(`/cart/${match.params.id}?qty=${qty}`)} //there was a blank set of curly braces here, you just put quantity in \n} */\n  \n/*const previousPageHandler = () => {\n  \n  window.history.back()\n}*/\n\n \n\n  /*console.log(productDetails)*/\n\n\n\n/*const submitHandler =(e) =>{\n  e.preventDefault() //since submit handler is being called inside a form\n  dispatch(createProductReview(match.params.id,{\n    rating,\n    comment //both rating and comment are coming from local/comment state\n  }))\n}*/\n\n  \n\n      return(\n        <>\n       \n        {loading ? <Loader/>:error ?<Message variant='danger'>{error}</Message>:(\n          <>\n          <Meta title={account.Name}/>\n          <Row>\n           <Col md={6}>\n           <Link to='/'>Go Back</Link>\n         <h2>Current Balance:</h2>\n         <p></p>\n         <hr/>\n\n         <h2>Withdrawable Balance:</h2>\n         <p></p>\n     \n           </Col>\n           <Col md={3}>\n            <ListGroup variant='flush'>\n\n              \n\n\n            </ListGroup>\n           </Col>\n            <Col md={3}>\n             <Card>\n              <ListGroup variant='flush'>\n              \n\n              </ListGroup>\n             </Card>\n            </Col>\n\n\n          </Row>\n          <Row>\n            <Col md={6}>\n              <h2>Reviews</h2>\n              \n              <ListGroup variant=\"flush\">\n               \n               <ListGroup.Item>\n                \n               </ListGroup.Item>\n              </ListGroup>\n            </Col>\n          </Row>\n          </>\n        )}\n\n        </>\n      )\n\n}\n\nexport default ViewBalanceScreen"]},"metadata":{},"sourceType":"module"}