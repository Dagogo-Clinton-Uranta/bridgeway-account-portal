{"ast":null,"code":"import { PRODUCT_LIST_REQUEST, PRODUCT_LIST_SUCCESS, PRODUCT_LIST_FAILURE // PRODUCT_LIST_BY_MERCHANT_REQUEST,\n// PRODUCT_LIST_BY_MERCHANT_SUCCESS,\n// PRODUCT_LIST_BY_MERCHANT_FAILURE,\n, PRODUCT_DETAILS_REQUEST, PRODUCT_DETAILS_SUCCESS, PRODUCT_DETAILS_FAILURE, PRODUCT_DELETE_REQUEST, PRODUCT_DELETE_SUCCESS, PRODUCT_DELETE_FAILURE, PRODUCT_CREATE_REQUEST, PRODUCT_CREATE_SUCCESS, PRODUCT_CREATE_FAILURE, PRODUCT_UPDATE_REQUEST, PRODUCT_UPDATE_SUCCESS, PRODUCT_UPDATE_FAILURE, PRODUCT_CREATE_REVIEW_REQUEST, PRODUCT_CREATE_REVIEW_SUCCESS, PRODUCT_CREATE_REVIEW_FAILURE //PRODUCT_CREATE_REVIEW_RESET,\n, PRODUCT_TOP_REQUEST, PRODUCT_TOP_SUCCESS, PRODUCT_TOP_FAILURE } from '../constants/productConstants.js';\nimport axios from 'axios';\nexport const listProducts = (keyword = '', pageNumber = '', vendorName = '') => async dispatch => {\n  /*this is an action creator, the object that is created is the action */\n\n  /*redux-thunk middleware allows me to have a function within a function, as below*/\n  try {\n    dispatch({\n      type: PRODUCT_LIST_REQUEST\n    }\n    /*try changing the route based on whether the user is merchant or is admin*/\n    );\n    const {\n      data\n    } = await axios.get(`/api/products?keyword=${keyword}&pageNumber=${pageNumber}&vendorName=${vendorName}`);\n    dispatch({\n      type: PRODUCT_LIST_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: PRODUCT_LIST_FAILURE,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\n/*\nEXPERIMENTAL NEW ACTION FOR  FETCHING PRODUCTS ACCORDING TO VENDOR\nexport const listProductsByMerchant =(keyword='',pageNumber='') =>async(dispatch) => { \n\n      \n  try{\n    dispatch({type:PRODUCT_LIST_BY_MERCHANT_REQUEST})\n                                      THE ROUTE BELOW SHOULD CHANGE\n     const {data} = await axios.get(`/api/products?keyword=${keyword}&pageNumber=${pageNumber}`)\n\n     dispatch({type:PRODUCT_LIST_BY_MERCHANT_SUCCESS,\n               payload:data\n             })\n\n  }\n  catch(error){\n      dispatch({type:PRODUCT_LIST_BY_MERCHANT_FAILURE,\n                payload: error.response && error.response.data.message?\n                 error.response.data.message:error.message })\n  }\n}*/\n\nexport const listProductDetails = id => async dispatch => {\n  /*this is an action creator, the object that is created is the action */\n\n  /*redux-thunk middleware allows me to have a function withina function, as below*/\n  try {\n    dispatch({\n      type: PRODUCT_DETAILS_REQUEST\n    }\n    /*THIS IS THE ACTION NOW*/\n    );\n    const {\n      data\n    } = await axios.get(`/api/products/${id}`);\n    dispatch({\n      type: PRODUCT_DETAILS_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: PRODUCT_DETAILS_FAILURE,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const deleteProduct = id => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: PRODUCT_DELETE_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState(); //we do config cus we wanna send he headers a content type of application/json\n\n    const config = {\n      headers: {\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    await axios.delete(`/api/products/${id}`, config); //i'm gonna take a stab here and say that the third argument for axios is for setting header property\n\n    dispatch({\n      type: PRODUCT_DELETE_SUCCESS\n    });\n    /*this data variable is file specific*/\n  } catch (error) {\n    dispatch({\n      type: PRODUCT_DELETE_FAILURE,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const createProduct = () => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: PRODUCT_CREATE_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState(); //we do config cus we wanna send he headers a content type of application/json\n\n    const config = {\n      headers: {\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    const {\n      data\n    } = await axios.post(`/api/products`, {}, config); //we passed in a post request but we're not sending any data here, hence the empty object in the place of no data\n    //i'm gonna take a stab here and say that the third argument for axios is for setting header property\n\n    dispatch({\n      type: PRODUCT_CREATE_SUCCESS,\n      payload: data\n    });\n    /*this data variable is file specific*/\n  } catch (error) {\n    dispatch({\n      type: PRODUCT_CREATE_FAILURE,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const updateProduct = product => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: PRODUCT_UPDATE_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState(); //we do config cus we wanna send he headers a content type of application/json\n\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    const {\n      data\n    } = await axios.put(`/api/products/${product.id}`, product, config); //we passed in a post request but we're not sending any data here, hence the empty object in the place of no data\n    //i'm gonna take a stab here and say that the third argument for axios is for setting header property\n\n    dispatch({\n      type: PRODUCT_UPDATE_SUCCESS,\n      payload: data\n    });\n    /*this data variable is file specific*/\n  } catch (error) {\n    dispatch({\n      type: PRODUCT_UPDATE_FAILURE,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const createProductReview = (productId, review) => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: PRODUCT_CREATE_REVIEW_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState(); //we do config cus we wanna send he headers a content type of application/json\n\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    await axios.post(`/api/products/${productId}/reviews`, review, config); //we passed in a post request but we're not sending any data here, hence the empty object in the place of no data\n    //i'm gonna take a stab here and say that the third argument for axios is for setting header property\n\n    dispatch({\n      type: PRODUCT_CREATE_REVIEW_SUCCESS\n    });\n  } catch (error) {\n    dispatch({\n      type: PRODUCT_CREATE_REVIEW_FAILURE,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const listTopProducts = () => async dispatch => {\n  try {\n    dispatch({\n      type: PRODUCT_TOP_REQUEST\n    }\n    /*THIS IS THE ACTION NOW*/\n    );\n    const {\n      data\n    } = await axios.get(`/api/products/top`);\n    dispatch({\n      type: PRODUCT_TOP_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: PRODUCT_TOP_FAILURE,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};","map":{"version":3,"sources":["/home/dagogo/Desktop/bridgeway-kids/frontend/src/actions/productActions.js"],"names":["PRODUCT_LIST_REQUEST","PRODUCT_LIST_SUCCESS","PRODUCT_LIST_FAILURE","PRODUCT_DETAILS_REQUEST","PRODUCT_DETAILS_SUCCESS","PRODUCT_DETAILS_FAILURE","PRODUCT_DELETE_REQUEST","PRODUCT_DELETE_SUCCESS","PRODUCT_DELETE_FAILURE","PRODUCT_CREATE_REQUEST","PRODUCT_CREATE_SUCCESS","PRODUCT_CREATE_FAILURE","PRODUCT_UPDATE_REQUEST","PRODUCT_UPDATE_SUCCESS","PRODUCT_UPDATE_FAILURE","PRODUCT_CREATE_REVIEW_REQUEST","PRODUCT_CREATE_REVIEW_SUCCESS","PRODUCT_CREATE_REVIEW_FAILURE","PRODUCT_TOP_REQUEST","PRODUCT_TOP_SUCCESS","PRODUCT_TOP_FAILURE","axios","listProducts","keyword","pageNumber","vendorName","dispatch","type","data","get","payload","error","response","message","listProductDetails","id","deleteProduct","getState","userLogin","userInfo","config","headers","Authorization","token","delete","createProduct","post","updateProduct","product","put","createProductReview","productId","review","listTopProducts"],"mappings":"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","sourcesContent":["import {PRODUCT_LIST_REQUEST,\n        PRODUCT_LIST_SUCCESS,\n        PRODUCT_LIST_FAILURE,\n       // PRODUCT_LIST_BY_MERCHANT_REQUEST,\n       // PRODUCT_LIST_BY_MERCHANT_SUCCESS,\n       // PRODUCT_LIST_BY_MERCHANT_FAILURE,\n        PRODUCT_DETAILS_REQUEST,\n        PRODUCT_DETAILS_SUCCESS,\n        PRODUCT_DETAILS_FAILURE,\n        PRODUCT_DELETE_REQUEST,\n        PRODUCT_DELETE_SUCCESS,\n        PRODUCT_DELETE_FAILURE,\n        PRODUCT_CREATE_REQUEST,\n        PRODUCT_CREATE_SUCCESS,\n        PRODUCT_CREATE_FAILURE,\n        PRODUCT_UPDATE_REQUEST,\n        PRODUCT_UPDATE_SUCCESS,\n        PRODUCT_UPDATE_FAILURE,\n        PRODUCT_CREATE_REVIEW_REQUEST,\n        PRODUCT_CREATE_REVIEW_SUCCESS,\n        PRODUCT_CREATE_REVIEW_FAILURE,\n        //PRODUCT_CREATE_REVIEW_RESET,\n        PRODUCT_TOP_REQUEST,\n        PRODUCT_TOP_SUCCESS,\n        PRODUCT_TOP_FAILURE\n\n         } from '../constants/productConstants.js'\n\nimport axios from 'axios'\n\n\nexport const listProducts =(keyword='',pageNumber='', vendorName='') =>async(dispatch) => { /*this is an action creator, the object that is created is the action */\n  /*redux-thunk middleware allows me to have a function within a function, as below*/\n      \n        try{\n          dispatch({type:PRODUCT_LIST_REQUEST}/*try changing the route based on whether the user is merchant or is admin*/)\n\n           const {data} = await axios.get(`/api/products?keyword=${keyword}&pageNumber=${pageNumber}&vendorName=${vendorName}`)\n\n           dispatch({type:PRODUCT_LIST_SUCCESS,\n                     payload:data\n                   })\n\n        }\n        catch(error){\n            dispatch({type:PRODUCT_LIST_FAILURE,\n                      payload: error.response && error.response.data.message?\n                       error.response.data.message:error.message })\n        }\n      }\n\n\n/*\nEXPERIMENTAL NEW ACTION FOR  FETCHING PRODUCTS ACCORDING TO VENDOR\nexport const listProductsByMerchant =(keyword='',pageNumber='') =>async(dispatch) => { \n\n      \n  try{\n    dispatch({type:PRODUCT_LIST_BY_MERCHANT_REQUEST})\n                                      THE ROUTE BELOW SHOULD CHANGE\n     const {data} = await axios.get(`/api/products?keyword=${keyword}&pageNumber=${pageNumber}`)\n\n     dispatch({type:PRODUCT_LIST_BY_MERCHANT_SUCCESS,\n               payload:data\n             })\n\n  }\n  catch(error){\n      dispatch({type:PRODUCT_LIST_BY_MERCHANT_FAILURE,\n                payload: error.response && error.response.data.message?\n                 error.response.data.message:error.message })\n  }\n}*/\n\n\nexport const listProductDetails =(id) => async (dispatch) =>{ /*this is an action creator, the object that is created is the action */\n  /*redux-thunk middleware allows me to have a function withina function, as below*/\n       \n        try{\n          dispatch({type:PRODUCT_DETAILS_REQUEST}/*THIS IS THE ACTION NOW*/)\n\n           const {data} = await axios.get(`/api/products/${id}`)\n\n           dispatch({type:PRODUCT_DETAILS_SUCCESS,\n                     payload:data\n                   })\n\n        }\n        catch(error){\n            dispatch({type:PRODUCT_DETAILS_FAILURE,\n                      payload: error.response && error.response.data.message?\n                       error.response.data.message:error.message })\n        }\n      }\n\n\n\n\nexport const deleteProduct  = (id) => async(dispatch,getState) =>{\n\n  try {\n    dispatch({type: PRODUCT_DELETE_REQUEST})\n\n     const {userLogin:{userInfo}} = getState()\n    //we do config cus we wanna send he headers a content type of application/json\n    const config = {\n      headers:{\n\n        Authorization:`Bearer ${userInfo.token}`\n      }\n    }\n   await axios.delete(`/api/products/${id}`,config)\n    //i'm gonna take a stab here and say that the third argument for axios is for setting header property\n\n    dispatch({\n              type: PRODUCT_DELETE_SUCCESS\n            })\n               /*this data variable is file specific*/\n \n\n\n  }\n   catch(error){\n     dispatch({type:PRODUCT_DELETE_FAILURE,\n               payload: error.response && error.response.data.message?\n                error.response.data.message:error.message })\n   }\n}\n\n\nexport const createProduct  = () => async(dispatch,getState)=> {\n\n  try {\n    dispatch({\n      type: PRODUCT_CREATE_REQUEST\n\n    })\n\n     const {userLogin:{userInfo}} = getState()\n    //we do config cus we wanna send he headers a content type of application/json\n    const config = {\n      headers:{\n\n        Authorization:`Bearer ${userInfo.token}`\n      }\n    }\n   const{data} = await axios.post(`/api/products`,{},config) //we passed in a post request but we're not sending any data here, hence the empty object in the place of no data\n    //i'm gonna take a stab here and say that the third argument for axios is for setting header property\n\n    dispatch({\n              type: PRODUCT_CREATE_SUCCESS,\n              payload:data\n            })\n               /*this data variable is file specific*/\n\n\n\n  }\n   catch(error){\n     dispatch({type:PRODUCT_CREATE_FAILURE,\n               payload: error.response && error.response.data.message?\n                error.response.data.message:error.message })\n   }\n}\n\n\nexport const updateProduct  = (product) => async (dispatch,getState)=> {\n\n  try {\n    dispatch({\n      type: PRODUCT_UPDATE_REQUEST\n\n    })\n\n     const {userLogin:{userInfo}} = getState()\n    //we do config cus we wanna send he headers a content type of application/json\n    const config = {\n      headers:{\n        'Content-Type':'application/json',\n        Authorization:`Bearer ${userInfo.token}`\n      }\n    }\n   const{data} = await axios.put(`/api/products/${product.id}`,product,config) //we passed in a post request but we're not sending any data here, hence the empty object in the place of no data\n    //i'm gonna take a stab here and say that the third argument for axios is for setting header property\n\n    dispatch({\n              type: PRODUCT_UPDATE_SUCCESS,\n              payload:data\n            })\n               /*this data variable is file specific*/\n\n\n\n  }\n   catch(error){\n     dispatch({type:PRODUCT_UPDATE_FAILURE,\n               payload: error.response && error.response.data.message?\n                error.response.data.message:error.message })\n   }\n}\n\n\nexport const createProductReview  = (productId,review) => async (dispatch,getState) =>{\n\n  try {\n    dispatch({\n      type: PRODUCT_CREATE_REVIEW_REQUEST\n\n    })\n\n     const {userLogin:{userInfo}} = getState()\n    //we do config cus we wanna send he headers a content type of application/json\n    const config = {\n      headers:{\n        'Content-Type':'application/json',\n        Authorization:`Bearer ${userInfo.token}`\n      }\n    }\n    await axios.post(`/api/products/${productId}/reviews`,review,config) //we passed in a post request but we're not sending any data here, hence the empty object in the place of no data\n    //i'm gonna take a stab here and say that the third argument for axios is for setting header property\n\n    dispatch({\n              type: PRODUCT_CREATE_REVIEW_SUCCESS\n            })\n               \n\n\n  }\n   catch(error){\n     dispatch({type:PRODUCT_CREATE_REVIEW_FAILURE,\n               payload: error.response && error.response.data.message?\n                error.response.data.message:error.message })\n   }\n}\n\nexport const listTopProducts =() => async(dispatch) =>{ \n       \n        try{\n          dispatch({type:PRODUCT_TOP_REQUEST}/*THIS IS THE ACTION NOW*/)\n\n           const {data} = await axios.get(`/api/products/top`)\n\n           dispatch({type:PRODUCT_TOP_SUCCESS,\n                     payload:data\n                   })\n\n        }\n        catch(error){\n            dispatch({type:PRODUCT_TOP_FAILURE,\n                      payload: error.response && error.response.data.message?\n                       error.response.data.message:error.message })\n        }\n      }\n\n"]},"metadata":{},"sourceType":"module"}