{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/dagogo/Desktop/bridgeway-kids/frontend/src/screens/UpdateCabaScreen.js\",\n    _s = $RefreshSig$();\n\nimport axios from 'axios';\nimport React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Form, Button, Card } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Message from '../components/Message.js';\nimport Loader from '../components/Loader.js';\nimport { listProductDetails, updateProduct } from '../actions/productActions.js';\nimport FormContainer from '../components/FormContainer.js';\nimport { PRODUCT_UPDATE_RESET } from '../constants/productConstants.js';\n\nconst UpdateCabaScreen = ({\n  match,\n  history\n}) => {\n  _s();\n\n  //he is taking location & history out of the props, normally it is props.history\n  const productId = match.params.id;\n  const [name, setName] = useState(''); //const [email,setEmail] = useState('')\n\n  const [price, setPrice] = useState(0); //component level state right here, not application level state\n\n  const [image, setImage] = useState('');\n  const [brand, setBrand] = useState('');\n  const [category, setCategory] = useState('');\n  const [countInStock, setCountInStock] = useState('');\n  const [description, setDescription] = useState('');\n  const [uploading, setUploading] = useState(false);\n  const dispatch = useDispatch(); //dont forget that real dispatches only take place in action creators, you are only calling useDispatch here\n\n  const productDetails = useSelector(state => state.productDetails);\n  const {\n    loading,\n    error,\n    product\n  } = productDetails;\n  const productUpdate = useSelector(state => state.productUpdate);\n  const {\n    loading: loadingUpdate,\n    error: errorUpdate,\n    success: successUpdate\n  } = productUpdate;\n  const userLogin = useSelector(state => state.userLogin);\n  const {\n    userInfo\n  } = userLogin;\n  /*useEffect(()=> { \n    if(!userInfo){\n     history.push('/login')}\n    },[userInfo,history])*/\n\n  /*useEffect( () => {\n    if(successUpdate){\n      dispatch({type:PRODUCT_UPDATE_RESET})\n      history.push('/admin/productlist')\n    } \n    else{\n      if(!product.name ||product.id !== productId){ //we are just checking any aspect of the user here to see if user object exists\n        dispatch(listProductDetails(productId))\n      }else {\n        setName(product.name)\n        //setEmail(product.email)\n        setImage(product.image)\n        setBrand(product.brand)\n        setCategory(product.category)\n        setCountInStock(product.countInStock)\n        setDescription(product.description)\n      }\n    }\n  },[dispatch,productId,history,successUpdate,product])*/\n\n  /*i deleted user as a useEffect dependency */\n\n  const uploadFileHandler = async e => {\n    const file = e.target.files[0]; //we get access to this as an array, because you have the ability to upload multiple files\n\n    const formData = new FormData();\n    formData.append('excel', file);\n    setUploading(true);\n\n    try {\n      const config = {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      };\n      const {\n        data\n      } = await axios.post('/api/upload', formData, config);\n      setImage(data);\n      setUploading(false);\n    } catch (error) {\n      console.log(error);\n      setUploading(false);\n    }\n  };\n  /*const submitHandler = (e) => {\n          e.preventDefault()\n  dispatch(updateProduct({\n    _id:productId,\n    name,\n    price,\n    brand,\n    category,\n    image,\n    description,\n    countInStock\n  }))\n   }*/\n\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"center\", {\n      children: /*#__PURE__*/_jsxDEV(Card, {\n        className: \"containerBox\",\n        children: /*#__PURE__*/_jsxDEV(FormContainer, {\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            children: \" Create / Edit Product\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 5\n          }, this), loadingUpdate && /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 21\n          }, this), errorUpdate && /*#__PURE__*/_jsxDEV(Message, {\n            variant: \"danger\",\n            children: errorUpdate\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 21\n          }, this), loading ? /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 15\n          }, this) : error ? /*#__PURE__*/_jsxDEV(Message, {\n            variant: \"danger\",\n            children: error\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 31\n          }, this) : /*#__PURE__*/_jsxDEV(Form\n          /*onSubmit={submitHandler}*/\n          , {\n            children: [\"      \", /*#__PURE__*/_jsxDEV(Form.Group, {\n              controlId: \"image\",\n              children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                children: \"  File Upload Status \"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 120,\n                columnNumber: 9\n              }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                type: \"text\",\n                placeholder: \"Enter image url\",\n                value: image,\n                onChange: e => setImage(e.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 121,\n                columnNumber: 9\n              }, this), /*#__PURE__*/_jsxDEV(Form.File, {\n                id: \"image-file\",\n                label: \"choose file\",\n                custom: true,\n                onChange: uploadFileHandler,\n                children: uploading && /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 124,\n                  columnNumber: 25\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 123,\n                columnNumber: 10\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 118,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Link, {\n              to: \"/\",\n              children: /*#__PURE__*/_jsxDEV(Button, {\n                type: \"submit\",\n                variant: \"primary\",\n                children: \"Go Back\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 130,\n                columnNumber: 23\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 130,\n              columnNumber: 9\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 7\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 5\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 5\n    }, this)\n  }, void 0, false);\n};\n\n_s(UpdateCabaScreen, \"r4Q+mn8Hq0MWUe7rDKRg2BjexY4=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector];\n});\n\n_c = UpdateCabaScreen;\nexport default UpdateCabaScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"UpdateCabaScreen\");","map":{"version":3,"sources":["/home/dagogo/Desktop/bridgeway-kids/frontend/src/screens/UpdateCabaScreen.js"],"names":["axios","React","useState","useEffect","Link","Form","Button","Card","useDispatch","useSelector","Message","Loader","listProductDetails","updateProduct","FormContainer","PRODUCT_UPDATE_RESET","UpdateCabaScreen","match","history","productId","params","id","name","setName","price","setPrice","image","setImage","brand","setBrand","category","setCategory","countInStock","setCountInStock","description","setDescription","uploading","setUploading","dispatch","productDetails","state","loading","error","product","productUpdate","loadingUpdate","errorUpdate","success","successUpdate","userLogin","userInfo","uploadFileHandler","e","file","target","files","formData","FormData","append","config","headers","data","post","console","log","value"],"mappings":"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","sourcesContent":["import axios from 'axios'\nimport React ,{useState ,useEffect} from 'react'\nimport {Link} from 'react-router-dom'\nimport {Form, Button,Card} from 'react-bootstrap'\nimport {useDispatch, useSelector} from 'react-redux'\nimport Message from '../components/Message.js'\nimport Loader from '../components/Loader.js'\nimport {listProductDetails, updateProduct} from '../actions/productActions.js'\nimport FormContainer from '../components/FormContainer.js'\nimport {PRODUCT_UPDATE_RESET} from '../constants/productConstants.js'\n\n\n\n\nconst UpdateCabaScreen= ({match, history}) => { //he is taking location & history out of the props, normally it is props.history\n    const productId = match.params.id\n\n  const [name,setName] = useState('')\n  //const [email,setEmail] = useState('')\n  const [price,setPrice] = useState(0)  //component level state right here, not application level state\n  const [image,setImage] = useState('')\n  const [brand,setBrand] = useState('')\n  const [category,setCategory] = useState('')\n  const [countInStock,setCountInStock] = useState('')\n  const [description,setDescription] = useState('')\n  const [uploading,setUploading] = useState(false)\n\n  \n  const dispatch = useDispatch() //dont forget that real dispatches only take place in action creators, you are only calling useDispatch here\n\n  const productDetails = useSelector(state => state.productDetails);\n  const {loading, error,product} = productDetails\n\n  const productUpdate = useSelector(state => state.productUpdate);\n  const {loading:loadingUpdate, error:errorUpdate,success:successUpdate } = productUpdate\n\n  const userLogin = useSelector(state => state.userLogin);\n  const {userInfo } = userLogin\n\n  /*useEffect(()=> { \n    if(!userInfo){\n     history.push('/login')}\n    },[userInfo,history])*/\n\n  /*useEffect( () => {\n    if(successUpdate){\n      dispatch({type:PRODUCT_UPDATE_RESET})\n      history.push('/admin/productlist')\n    } \n    else{\n      if(!product.name ||product.id !== productId){ //we are just checking any aspect of the user here to see if user object exists\n        dispatch(listProductDetails(productId))\n      }else {\n        setName(product.name)\n        //setEmail(product.email)\n        setImage(product.image)\n        setBrand(product.brand)\n        setCategory(product.category)\n        setCountInStock(product.countInStock)\n        setDescription(product.description)\n      }\n    }\n\n},[dispatch,productId,history,successUpdate,product])*/ /*i deleted user as a useEffect dependency */\n\nconst uploadFileHandler =async (e)=>{\n  const file = e.target.files[0] //we get access to this as an array, because you have the ability to upload multiple files\n  const formData = new FormData()\n  formData.append('excel',file)\n  setUploading(true)\n\n   try{\n     const config ={\n     headers:{ \n       'Content-Type':'multipart/form-data'\n     }\n    }\n     const {data} =await axios.post('/api/upload', formData ,config)\n     setImage(data)\n     setUploading(false)\n   }\n   catch(error){\n      console.log(error)\n     setUploading(false)\n   }\n}\n\n  /*const submitHandler = (e) => {\n          e.preventDefault()\n  dispatch(updateProduct({\n    _id:productId,\n    name,\n    price,\n    brand,\n    category,\n    image,\n    description,\n    countInStock\n  }))\n\n  }*/\n\n    return (\n        <>\n    {/*<Link to='/' className='btn btn-light my-3'>Go back</Link>*/}\n     \n    <center>\n        <Card className='containerBox'>\n    <FormContainer>\n    <h1> Create / Edit Product</h1>\n   {loadingUpdate &&<Loader/>}\n    {errorUpdate && <Message variant='danger'>{errorUpdate}</Message>}\n\n    {loading? <Loader/>:error?<Message variant='danger'>{error}</Message>:(\n      <Form /*onSubmit={submitHandler}*/>\n \n\n {/*3*/}      <Form.Group controlId='image'>\n\n        <Form.Label>  File Upload Status </Form.Label>\n        <Form.Control type='text' placeholder=\"Enter image url\" value={image} onChange={(e)=>setImage(e.target.value)}></Form.Control>\n        {/* You need to read about form group from react bootstrap*/}\n         <Form.File id=\"image-file\" label=\"choose file\" custom onChange={uploadFileHandler}>\n           {uploading &&<Loader/>}\n         </Form.File>\n       </Form.Group>\n\n\n\n        <Link to ='/'><Button type='submit' variant='primary'>Go Back</Button></Link>\n      </Form>\n    )}\n\n     \n    </FormContainer>\n    </Card>\n     </center>\n\n        </>\n     \n    )\n\n}\n\nexport default UpdateCabaScreen\n"]},"metadata":{},"sourceType":"module"}