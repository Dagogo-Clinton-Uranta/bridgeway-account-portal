{"ast":null,"code":"import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { productListReducer, productListByMerchantReducer, productDetailsReducer, productDeleteReducer, productCreateReducer, productUpdateReducer, productCreateReviewReducer, productTopRatedReducer } from './reducers/productReducers.js';\nimport { cartReducer } from './reducers/cartReducers.js';\nimport { userLoginReducer, userSendReducer, adminSendReducer, userVerifyReducer, userRegisterReducer, userDetailsReducer, userProfileUpdateReducer, userListReducer, userDeleteReducer, userUpdateReducer } from './reducers/userReducers.js';\nimport { orderCreateReducer, orderDetailsReducer, orderPayReducer, orderDeliverReducer, orderListMyReducer, orderListReducer, orderApproveReducer } from './reducers/orderReducers.js';\nimport { accountDetailsReducer } from './reducers/accountReducers.js';\nconst reducer = combineReducers({\n  productList: productListReducer,\n  productListByMerchant: productListByMerchantReducer,\n  productDetails: productDetailsReducer,\n  productDelete: productDeleteReducer,\n  productCreate: productCreateReducer,\n  productUpdate: productUpdateReducer,\n  productCreateReview: productCreateReviewReducer,\n  productTopRated: productTopRatedReducer,\n  cart: cartReducer,\n  userLogin: userLoginReducer,\n  userSend: userSendReducer,\n  adminSend: adminSendReducer,\n  userVerify: userVerifyReducer,\n  userRegister: userRegisterReducer,\n  userDetails: userDetailsReducer,\n  userProfileUpdate: userProfileUpdateReducer,\n  userList: userListReducer,\n  userDelete: userDeleteReducer,\n  userUpdate: userUpdateReducer,\n  orderCreate: orderCreateReducer,\n  orderDetails: orderDetailsReducer,\n  orderPay: orderPayReducer,\n  orderDeliver: orderDeliverReducer,\n  orderListMy: orderListMyReducer,\n  orderList: orderListReducer,\n  orderApprove: orderApproveReducer,\n  accountDetails: accountDetailsReducer\n}); //WE JSON.PARSE LOCAL STORAGE CUZ ITS IN STRING FORM AND WE WANT OUR OBJECT BACK\n\n/*const cartItemsFromStorage = localStorage.getItem('cartItems') ? JSON.parse(localStorage.getItem('cartItems')):[]\nconst shippingAddressFromStorage = localStorage.getItem('shippingAddress') ? JSON.parse(localStorage.getItem('shippingAddress')):{}*/\n\nconst userInfoFromStorage = localStorage.getItem('userInfo') ? JSON.parse(localStorage.getItem('userInfo')) : null;\nconst initialState = {\n  /*cart: {cartItems:cartItemsFromStorage, shippingAddress:shippingAddressFromStorage},*/\n  userLogin: {\n    userInfo: userInfoFromStorage\n  }\n};\nconst middleware = [thunk];\nconst store = createStore(reducer, initialState, composeWithDevTools(applyMiddleware(...middleware)));\nexport default store;","map":{"version":3,"sources":["/home/dagogo/Desktop/bridgeway-kids/frontend/src/store.js"],"names":["createStore","combineReducers","applyMiddleware","thunk","composeWithDevTools","productListReducer","productListByMerchantReducer","productDetailsReducer","productDeleteReducer","productCreateReducer","productUpdateReducer","productCreateReviewReducer","productTopRatedReducer","cartReducer","userLoginReducer","userSendReducer","adminSendReducer","userVerifyReducer","userRegisterReducer","userDetailsReducer","userProfileUpdateReducer","userListReducer","userDeleteReducer","userUpdateReducer","orderCreateReducer","orderDetailsReducer","orderPayReducer","orderDeliverReducer","orderListMyReducer","orderListReducer","orderApproveReducer","accountDetailsReducer","reducer","productList","productListByMerchant","productDetails","productDelete","productCreate","productUpdate","productCreateReview","productTopRated","cart","userLogin","userSend","adminSend","userVerify","userRegister","userDetails","userProfileUpdate","userList","userDelete","userUpdate","orderCreate","orderDetails","orderPay","orderDeliver","orderListMy","orderList","orderApprove","accountDetails","userInfoFromStorage","localStorage","getItem","JSON","parse","initialState","userInfo","middleware","store"],"mappings":"AAAA,SAAQA,WAAR,EAAoBC,eAApB,EAAoCC,eAApC,QAA0D,OAA1D;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,SAAQC,mBAAR,QAAkC,0BAAlC;AACA,SAAQC,kBAAR,EAA2BC,4BAA3B,EAAyDC,qBAAzD,EAAgFC,oBAAhF,EAAqGC,oBAArG,EAA0HC,oBAA1H,EAAgJC,0BAAhJ,EAA2KC,sBAA3K,QAAwM,+BAAxM;AACA,SAAQC,WAAR,QAA0B,4BAA1B;AACA,SAAQC,gBAAR,EAAyBC,eAAzB,EAAyCC,gBAAzC,EAA2DC,iBAA3D,EAA8EC,mBAA9E,EAAmGC,kBAAnG,EAAuHC,wBAAvH,EAAgJC,eAAhJ,EAAgKC,iBAAhK,EAAkLC,iBAAlL,QAA0M,4BAA1M;AACA,SAAQC,kBAAR,EAA4BC,mBAA5B,EAAiDC,eAAjD,EAAiEC,mBAAjE,EAAsFC,kBAAtF,EAAyGC,gBAAzG,EAA0HC,mBAA1H,QAAqJ,6BAArJ;AACA,SAAQC,qBAAR,QAAqC,+BAArC;AAEA,MAAMC,OAAO,GAAG/B,eAAe,CAAC;AAC9BgC,EAAAA,WAAW,EAAE5B,kBADiB;AAE9B6B,EAAAA,qBAAqB,EAAC5B,4BAFQ;AAG9B6B,EAAAA,cAAc,EAAC5B,qBAHe;AAI9B6B,EAAAA,aAAa,EAAC5B,oBAJgB;AAK9B6B,EAAAA,aAAa,EAAC5B,oBALgB;AAM9B6B,EAAAA,aAAa,EAAC5B,oBANgB;AAO9B6B,EAAAA,mBAAmB,EAAC5B,0BAPU;AAQ9B6B,EAAAA,eAAe,EAAC5B,sBARc;AAS9B6B,EAAAA,IAAI,EAAE5B,WATwB;AAU9B6B,EAAAA,SAAS,EAAC5B,gBAVoB;AAW9B6B,EAAAA,QAAQ,EAAC5B,eAXqB;AAY9B6B,EAAAA,SAAS,EAAC5B,gBAZoB;AAa9B6B,EAAAA,UAAU,EAAC5B,iBAbmB;AAc9B6B,EAAAA,YAAY,EAAC5B,mBAdiB;AAe9B6B,EAAAA,WAAW,EAAC5B,kBAfkB;AAgB9B6B,EAAAA,iBAAiB,EAAC5B,wBAhBY;AAiB9B6B,EAAAA,QAAQ,EAAC5B,eAjBqB;AAkB9B6B,EAAAA,UAAU,EAAC5B,iBAlBmB;AAmB9B6B,EAAAA,UAAU,EAAC5B,iBAnBmB;AAoB9B6B,EAAAA,WAAW,EAAC5B,kBApBkB;AAqB9B6B,EAAAA,YAAY,EAAC5B,mBArBiB;AAsB9B6B,EAAAA,QAAQ,EAAC5B,eAtBqB;AAuB9B6B,EAAAA,YAAY,EAAC5B,mBAvBiB;AAwB9B6B,EAAAA,WAAW,EAAC5B,kBAxBkB;AAyB9B6B,EAAAA,SAAS,EAAC5B,gBAzBoB;AA0B9B6B,EAAAA,YAAY,EAAC5B,mBA1BiB;AA2B9B6B,EAAAA,cAAc,EAAC5B;AA3Be,CAAD,CAA/B,C,CA6BA;;AACA;AACA;;AAEA,MAAM6B,mBAAmB,GAAGC,YAAY,CAACC,OAAb,CAAqB,UAArB,IAAmCC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,UAArB,CAAX,CAAnC,GAAgF,IAA5G;AACA,MAAMG,YAAY,GAAG;AACnB;AACAvB,EAAAA,SAAS,EAAG;AAACwB,IAAAA,QAAQ,EAAEN;AAAX;AAFO,CAArB;AAKA,MAAMO,UAAU,GAAE,CAAChE,KAAD,CAAlB;AAEA,MAAMiE,KAAK,GAAGpE,WAAW,CAACgC,OAAD,EAAUiC,YAAV,EAAuB7D,mBAAmB,CAACF,eAAe,CAAC,GAAGiE,UAAJ,CAAhB,CAA1C,CAAzB;AAEA,eAAeC,KAAf","sourcesContent":["import {createStore,combineReducers,applyMiddleware} from 'redux'\nimport thunk from 'redux-thunk'\nimport {composeWithDevTools} from 'redux-devtools-extension'\nimport {productListReducer,productListByMerchantReducer, productDetailsReducer, productDeleteReducer,productCreateReducer,productUpdateReducer, productCreateReviewReducer,productTopRatedReducer} from './reducers/productReducers.js'\nimport {cartReducer} from './reducers/cartReducers.js'\nimport {userLoginReducer,userSendReducer,adminSendReducer, userVerifyReducer, userRegisterReducer, userDetailsReducer, userProfileUpdateReducer,userListReducer,userDeleteReducer,userUpdateReducer} from './reducers/userReducers.js'\nimport {orderCreateReducer, orderDetailsReducer, orderPayReducer,orderDeliverReducer, orderListMyReducer,orderListReducer,orderApproveReducer } from './reducers/orderReducers.js'\nimport {accountDetailsReducer} from  './reducers/accountReducers.js'\n\nconst reducer = combineReducers({\n  productList: productListReducer,\n  productListByMerchant:productListByMerchantReducer,\n  productDetails:productDetailsReducer,\n  productDelete:productDeleteReducer,\n  productCreate:productCreateReducer,\n  productUpdate:productUpdateReducer,\n  productCreateReview:productCreateReviewReducer,\n  productTopRated:productTopRatedReducer,\n  cart: cartReducer,\n  userLogin:userLoginReducer,\n  userSend:userSendReducer,\n  adminSend:adminSendReducer,\n  userVerify:userVerifyReducer,\n  userRegister:userRegisterReducer,\n  userDetails:userDetailsReducer,\n  userProfileUpdate:userProfileUpdateReducer,\n  userList:userListReducer,\n  userDelete:userDeleteReducer,\n  userUpdate:userUpdateReducer,\n  orderCreate:orderCreateReducer,\n  orderDetails:orderDetailsReducer,\n  orderPay:orderPayReducer,\n  orderDeliver:orderDeliverReducer,\n  orderListMy:orderListMyReducer,\n  orderList:orderListReducer,\n  orderApprove:orderApproveReducer,\n  accountDetails:accountDetailsReducer,\n})\n//WE JSON.PARSE LOCAL STORAGE CUZ ITS IN STRING FORM AND WE WANT OUR OBJECT BACK\n/*const cartItemsFromStorage = localStorage.getItem('cartItems') ? JSON.parse(localStorage.getItem('cartItems')):[]\nconst shippingAddressFromStorage = localStorage.getItem('shippingAddress') ? JSON.parse(localStorage.getItem('shippingAddress')):{}*/\n\nconst userInfoFromStorage = localStorage.getItem('userInfo') ? JSON.parse(localStorage.getItem('userInfo')):null\nconst initialState = {\n  /*cart: {cartItems:cartItemsFromStorage, shippingAddress:shippingAddressFromStorage},*/\n  userLogin : {userInfo: userInfoFromStorage}\n}\n\nconst middleware =[thunk]\n\nconst store = createStore(reducer, initialState,composeWithDevTools(applyMiddleware(...middleware)));\n\nexport default store\n"]},"metadata":{},"sourceType":"module"}